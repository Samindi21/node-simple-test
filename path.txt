1) open folder -> terminal -> npm init -y -> create package.json
2) create new index.js for server
3) npm i express ejs mongoose => install express ejs and db things
4) node index.js
5) npm i nodemon -> nodemon index.js -> localhost:3000
6) make views folder
7) in index.js put-> app.set('view engine','ejs');
8) views -> index.ejs (Like home page), add.ejs,layout.ejs,
9) views-> partials/common -> header.ejs(common things)
10) install springboot layout
    npm install express-ejs-layouts
11) put springboot link in index.ejs & layout.ejs
12) install ejs language support library

db.js
controller.js
Schema folder -> user.js

get->
how to make a CRUD operations connect with mongodb in nodejs step by step guidance

blog.logrocket.com
stack overflow

https://jenilgajjar.medium.com/crud-operation-using-node-js-and-express-js-a0d63a2216aa

https://blog.logrocket.com/how-to-use-ejs-template-node-js-application/

// Step 1: Set Up Your Project
const express = require('express');
const mongoose = require('mongoose');

const app = express();
const PORT = process.env.PORT || 3000;

// Step 3: Connect to MongoDB Atlas
mongoose.connect('YOUR_MONGODB_CONNECTION_STRING', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('Failed to connect to MongoDB', err));

// Step 4: Create a Mongoose Schema
const todoSchema = new mongoose.Schema({
    title: String,
    description: String,
    completed: Boolean
});

const Todo = mongoose.model('Todo', todoSchema);

// Step 5: Set Up Express Routes
app.use(express.json());

// Create a new todo
app.post('/todos', async (req, res) => {
    const todo = new Todo(req.body);
    await todo.save();
    res.json(todo);
});

// Read all todos
app.get('/todos', async (req, res) => {
    const todos = await Todo.find();
    res.json(todos);
});

// Read a single todo by ID
app.get('/todos/:id', async (req, res) => {
    const todo = await Todo.findById(req.params.id);
    res.json(todo);
});

// Update a todo by ID
app.put('/todos/:id', async (req, res) => {
    const todo = await Todo.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(todo);
});

// Delete a todo by ID
app.delete('/todos/:id', async (req, res) => {
    await Todo.findByIdAndDelete(req.params.id);
    res.send('Todo deleted successfully');
});

// Step 7: Start the Server
app.listen(PORT, () => console.log(`Server is running on port ${PORT}`));
================================================================================
const express = require('express');
const app = express();
const port = 3000;
const bodyParser = require('body-parser');
const methodOverride = require('method-override');

// Set EJS as the view engine
app.set('view engine', 'ejs');

// Middleware
app.use(bodyParser.urlencoded({ extended: false }));
app.use(methodOverride('_method'));

// Temporary in-memory data store
let items = [
    { id: 1, name: 'Item 1' },
    { id: 2, name: 'Item 2' },
    { id: 3, name: 'Item 3' }
];

// Routes
// Read - Display all items
app.get('/', (req, res) => {
    res.render('index', { items });
});

// Create - Display form to add new item
app.get('/items/new', (req, res) => {
    res.render('new');
});

// Create - Add new item
app.post('/items', (req, res) => {
    const newItem = {
        id: items.length + 1,
        name: req.body.name
    };
    items.push(newItem);
    res.redirect('/');
});

// Update - Display form to edit item
app.get('/items/:id/edit', (req, res) => {
    const id = parseInt(req.params.id);
    const item = items.find(item => item.id === id);
    res.render('edit', { item });
});

// Update - Update item
app.put('/items/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const item = items.find(item => item.id === id);
    item.name = req.body.name;
    res.redirect('/');
});

// Delete - Delete item
app.delete('/items/:id', (req, res) => {
    const id = parseInt(req.params.id);
    items = items.filter(item => item.id !== id);
    res.redirect('/');
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
Now, let's create the corresponding EJS views:

Create a file named index.ejs inside the views directory with the following content:
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRUD App</title>
</head>
<body>
    <h1>Items</h1>
    <ul>
        <% items.forEach(item => { %>
            <li><%= item.name %> - <a href="/items/<%= item.id %>/edit">Edit</a> | 
                <form action="/items/<%= item.id %>?_method=DELETE" method="POST" style="display: inline;">
                    <button type="submit">Delete</button>
                </form>
            </li>
        <% }); %>
    </ul>
    <a href="/items/new">Add New Item</a>
</body>
</html>
Create a file named new.ejs inside the views directory with the following content:
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Item</title>
</head>
<body>
    <h1>New Item</h1>
    <form action="/items" method="POST">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>
        <button type="submit">Create</button>
    </form>
</body>
</html>
Create a file named edit.ejs inside the views directory with the following content:
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Item</title>
</head>
<body>
    <h1>Edit Item</h1>
    <form action="/items/<%= item.id %>?_method=PUT" method="POST">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" value="<%= item.name %>" required>
        <button type="submit">Update</button>
    </form>
</body>
</html>
Now, when you run your Node.js application (node app.js) and navigate to http://localhost:3000, you should see a list of items with options to edit or delete them. You can also add new items by visiting http://localhost:3000/items/new.








